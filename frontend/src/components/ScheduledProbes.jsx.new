import React, { useEffect, useState } from "react";
import {
  Button,
  Card,
  CardContent,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Select,
  MenuItem,
  FormControlLabel,
  Switch,
  CircularProgress,
  Snackbar,
  Alert
} from "@mui/material";
import { Add, Delete, Edit, Pause, PlayArrow, Refresh } from "@mui/icons-material";
import axios from "axios";

// --- TOOL OPTIONS ---
const toolOptions = [
  { value: "ping", label: "Ping" },
  { value: "traceroute", label: "Traceroute" },
  { value: "whois", label: "Whois" },
  { value: "dns", label: "DNS Lookup" },
  { value: "rdns", label: "Reverse DNS" },
  { value: "curl", label: "Curl (HTTP Request)" },
  { value: "nmap", label: "Port Check (Nmap)" },
];

const intervalOptions = [
  { value: 5, label: "Every 5 Minutes" },
  { value: 15, label: "Every 15 Minutes" },
  { value: 60, label: "Every Hour" },
  { value: 1440, label: "Every Day" }
];

// --- VALIDATION HELPERS ---
function isValidIP(ip) {
  return /^(\d{1,3}\.){3}\d{1,3}$/.test(ip.trim());
}
function isValidURL(url) {
  try { new URL(url); return true; } catch { return false; }
}
function isValidPorts(ports) {
  const arr = ports.split(",").filter(Boolean);
  return arr.every(p => /^\d+$/.test(p) && +p >= 1 && +p <= 65535) && arr.length > 0 && arr.length <= 3;
}
function getTimeSince(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  const now = new Date();
  const diffMs = now - date;
  const diffMinutes = Math.floor(diffMs / (1000 * 60));
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  if (diffDays > 0) return `${diffDays} day${diffDays > 1 ? "s" : ""} ago`;
  if (diffHours > 0) return `${diffHours} hour${diffHours > 1 ? "s" : ""} ago`;
  if (diffMinutes > 0) return `${diffMinutes} minute${diffMinutes > 1 ? "s" : ""} ago`;
  return "just now";
}

const API_BASE = "http://localhost:8000"; // Change if needed

export default function ScheduledProbes() {
  const [probes, setProbes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showDialog, setShowDialog] = useState(false);
  const [editId, setEditId] = useState(null);
  const [form, setForm] = useState(getDefaultForm());
  const [curlExtras, setCurlExtras] = useState({ method: "GET", headers: "", body: "" });
  const [nmapPorts, setNmapPorts] = useState("");
  const [targetError, setTargetError] = useState("");
  const [snackbar, setSnackbar] = useState({ open: false, message: "", severity: "success" });
  const [actionLoadingId, setActionLoadingId] = useState(null);

  // --- HELPERS ---
  function getDefaultForm() {
    return {
      name: "",
      description: "",
      tool: "ping",
      target: "",
      interval_minutes: 15,
      is_active: true,
      alert_on_failure: false,
      alert_on_threshold: false,
      threshold_value: null
    };
  }

  // --- LOAD PROBES ---
  const fetchProbes = async () => {
    setLoading(true);
    try {
      const res = await axios.get(`${API_BASE}/scheduled_probes/`, { withCredentials: true });
      setProbes(res.data || []);
    } catch {
      setSnackbar({ open: true, message: "Failed to load probes", severity: "error" });
    }
    setLoading(false);
  };
  useEffect(() => { fetchProbes(); }, []);

  // --- HANDLE FORM ---
  const handleOpenDialog = (probe = null) => {
    setEditId(probe ? probe.id : null);
    setForm(probe
      ? { ...probe, interval_minutes: probe.interval_minutes || 15 }
      : getDefaultForm()
    );
    setCurlExtras(probe && probe.tool === "curl"
      ? safeParseCurlDesc(probe.description)
      : { method: "GET", headers: "", body: "" }
    );
    setNmapPorts(probe && probe.tool === "nmap"
      ? (probe.target.includes(":") ? probe.target.split(":")[1] : "")
      : ""
    );
    setTargetError("");
    setShowDialog(true);
  };
  const handleCloseDialog = () => {
    setShowDialog(false);
    setEditId(null);
    setForm(getDefaultForm());
    setCurlExtras({ method: "GET", headers: "", body: "" });
    setNmapPorts("");
    setTargetError("");
  };

  function safeParseCurlDesc(desc) {
    try {
      return JSON.parse(desc);
    } catch { return { method: "GET", headers: "", body: "" }; }
  }

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (form.tool === "curl" && ["method", "headers", "body"].includes(name)) {
      setCurlExtras(prev => ({ ...prev, [name]: value }));
    } else if (form.tool === "nmap" && name === "nmapPorts") {
      setNmapPorts(value.replace(/[^0-9,]/g, ""));
    } else {
      setForm(prev => ({
        ...prev,
        [name]: type === "checkbox" ? checked : value
      }));
    }
    setTargetError("");
  };

  // --- SUBMIT ---
  const handleSubmit = async (e) => {
    e.preventDefault();
    // Tool-specific validation
    if (form.tool === "rdns" && !isValidIP(form.target)) {
      setTargetError("Reverse DNS requires a valid IPv4 address.");
      return;
    }
    if (form.tool === "curl" && !isValidURL(form.target)) {
      setTargetError("Curl requires a valid URL (e.g., https://example.com).");
      return;
    }
    if (form.tool === "nmap" && (!isValidPorts(nmapPorts) || nmapPorts === "")) {
      setTargetError("Please enter 1â€“3 valid port numbers (comma separated).");
      return;
    }
    // Prepare payload
    let payload = {
      ...form,
      interval_minutes: parseInt(form.interval_minutes, 10),
      alert_on_threshold: !!form.alert_on_threshold,
      threshold_value: form.threshold_value !== undefined ? form.threshold_value : null,
      description: form.tool === "curl" ? JSON.stringify(curlExtras) : form.description,
      target: form.tool === "nmap" ? `${form.target}:${nmapPorts}` : form.target
    };
    setLoading(true);
    try {
      if (editId) {
        await axios.put(`${API_BASE}/scheduled_probes/${editId}`, payload, { withCredentials: true });
        setSnackbar({ open: true, message: "Probe updated successfully!", severity: "success" });
      } else {
        await axios.post(`${API_BASE}/scheduled_probes/`, payload, { withCredentials: true });
        setSnackbar({ open: true, message: "Probe created successfully!", severity: "success" });
      }
      handleCloseDialog();
      fetchProbes();
    } catch (err) {
      let msg = "Failed to save probe";
      if (err.response && err.response.data && err.response.data.detail) {
        msg = err.response.data.detail;
      }
      setSnackbar({ open: true, message: msg, severity: "error" });
    }
    setLoading(false);
  };

  // --- ACTIONS (toggle, delete) ---
  const handleToggleActive = async (probe) => {
    setActionLoadingId(probe.id);
    try {
      await axios.post(`${API_BASE}/scheduled_probes/${probe.id}/toggle`, {}, { withCredentials: true });
      setSnackbar({ open: true, message: `Probe ${probe.is_active ? "paused" : "resumed"}`, severity: "success" });
      fetchProbes();
    } catch {
      setSnackbar({ open: true, message: "Failed to toggle", severity: "error" });
    }
    setActionLoadingId(null);
  };
  const handleDelete = async (probe) => {
    if (!window.confirm(`Delete probe "${probe.name}"?`)) return;
    setActionLoadingId(probe.id);
    try {
      await axios.delete(`${API_BASE}/scheduled_probes/${probe.id}`, { withCredentials: true });
      setSnackbar({ open: true, message: "Probe deleted!", severity: "success" });
      fetchProbes();
    } catch {
      setSnackbar({ open: true, message: "Failed to delete", severity: "error" });
    }
    setActionLoadingId(null);
  };

  // --- RENDER ---
  return (
    <Card className="mt-4">
      <CardContent>
        <div className="flex justify-between items-center mb-2">
          <Typography variant="h5">Scheduled Probes</Typography>
          <div>
            <Tooltip title="Refresh">
              <IconButton onClick={fetchProbes} disabled={loading}><Refresh /></IconButton>
            </Tooltip>
            <Button variant="contained" startIcon={<Add />} onClick={() => handleOpenDialog()} disabled={loading}>
              New Probe
            </Button>
          </div>
        </div>
        <TableContainer>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Name</TableCell>
                <TableCell>Tool</TableCell>
                <TableCell>Target</TableCell>
                <TableCell>Interval</TableCell>
                <TableCell>Status</TableCell>
                <TableCell>Alert on Failure</TableCell>
                <TableCell>Last Result</TableCell>
                <TableCell>Last Run</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {probes.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={9} align="center">
                    {loading ? <CircularProgress /> : "No scheduled probes found."}
                  </TableCell>
                </TableRow>
              ) : (
                probes.map((probe) => {
                  const lastResult = (probe.probe_results || []).slice(-1)[0];
                  return (
                    <TableRow key={probe.id}>
                      <TableCell>{probe.name}</TableCell>
                      <TableCell>{toolOptions.find(t => t.value === probe.tool)?.label || probe.tool}</TableCell>
                      <TableCell>
                        {probe.tool === "nmap" && probe.target.includes(":")
                          ? <>
                              <span>{probe.target.split(":")[0]}</span>
                              <Typography variant="caption" color="textSecondary">Ports: {probe.target.split(":")[1]}</Typography>
                            </>
                          : probe.target}
                      </TableCell>
                      <TableCell>{intervalOptions.find(i => i.value === probe.interval_minutes)?.label || `${probe.interval_minutes} min`}</TableCell>
                      <TableCell>
                        <Switch
                          checked={probe.is_active}
                          onChange={() => handleToggleActive(probe)}
                          disabled={actionLoadingId === probe.id}
                          color={probe.is_active ? "primary" : "default"}
                        />
                        {actionLoadingId === probe.id && <CircularProgress size={16} />}
                      </TableCell>
                      <TableCell>{probe.alert_on_failure ? "Yes" : "No"}</TableCell>
                      <TableCell>
                        {lastResult ? (
                          <Tooltip title={lastResult.result || ""}>
                            <span>{lastResult.status === "success" ? "Success" : "Failure"}</span>
                          </Tooltip>
                        ) : "â€”"}
                      </TableCell>
                      <TableCell>
                        {lastResult ? (
                          <Tooltip title={getTimeSince(lastResult.created_at)}>
                            <span>{new Date(lastResult.created_at).toLocaleString()}</span>
                          </Tooltip>
                        ) : "â€”"}
                      </TableCell>
                      <TableCell>
                        <Tooltip title="Edit">
                          <IconButton onClick={() => handleOpenDialog(probe)}><Edit /></IconButton>
                        </Tooltip>
                        <Tooltip title="Delete">
                          <IconButton color="error" onClick={() => handleDelete(probe)}>
                            <Delete />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                  );
                })
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </CardContent>
      <Dialog open={showDialog} onClose={handleCloseDialog} maxWidth="sm" fullWidth>
        <DialogTitle>{editId ? "Edit Probe" : "New Scheduled Probe"}</DialogTitle>
        <DialogContent>
          <form onSubmit={handleSubmit}>
            <TextField
              label="Name"
              name="name"
              value={form.name}
              onChange={handleChange}
              fullWidth
              margin="normal"
              required
              disabled={loading}
            />
            <TextField
              label="Description"
              name="description"
              value={form.description}
              onChange={handleChange}
              fullWidth
              margin="normal"
              disabled={loading}
            />
            <Select
              label="Tool"
              name="tool"
              value={form.tool}
              onChange={handleChange}
              fullWidth
              style={{ marginBottom: 16 }}
              disabled={loading}
            >
              {toolOptions.map((option) => (
                <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>
              ))}
            </Select>
            {/* Dynamic Target Field */}
            <TextField
              label={
                form.tool === "rdns"
                  ? "IP Address"
                  : form.tool === "curl"
                  ? "URL"
                  : form.tool === "nmap"
                  ? "Hostname or IP"
                  : "Target"
              }
              name="target"
              value={form.target}
              onChange={handleChange}
              fullWidth
              margin="normal"
              required
              disabled={loading}
              error={!!targetError}
              helperText={
                targetError ||
                (form.tool === "rdns"
                  ? "Enter a valid IPv4 address."
                  : form.tool === "curl"
                  ? "Enter a valid URL (e.g., https://example.com)"
                  : form.tool === "nmap"
                  ? "Enter a hostname or IP address. Ports below are required."
                  : "Enter target hostname, IP, or domain as appropriate.")
              }
            />
            {/* Nmap Extra Fields */}
            {form.tool === "nmap" && (
              <TextField
                label="Ports (comma separated, max 3)"
                name="nmapPorts"
                value={nmapPorts}
                onChange={handleChange}
                fullWidth
                margin="normal"
                required
                error={!!targetError}
                helperText={targetError || "E.g., 22,80,443"}
              />
            )}
            {/* Curl Extra Fields */}
            {form.tool === "curl" && (
              <>
                <Select
                  label="HTTP Method"
                  name="method"
                  value={curlExtras.method}
                  onChange={handleChange}
                  fullWidth
                  style={{ marginBottom: 16 }}
                  disabled={loading}
                >
                  {["GET", "POST", "HEAD", "PUT", "DELETE"].map((m) => (
                    <MenuItem key={m} value={m}>{m}</MenuItem>
                  ))}
                </Select>
                <TextField
                  label="Headers (JSON)"
                  name="headers"
                  value={curlExtras.headers}
                  onChange={handleChange}
                  fullWidth
                  margin="normal"
                  placeholder={`{"User-Agent": "Mozilla/5.0"}`}
                  disabled={loading}
                />
                <TextField
                  label="Body (for POST/PUT)"
                  name="body"
                  value={curlExtras.body}
                  onChange={handleChange}
                  fullWidth
                  margin="normal"
                  multiline
                  rows={2}
                  disabled={loading || curlExtras.method === "GET"}
                />
              </>
            )}
            <Select
              label="Interval"
              name="interval_minutes"
              value={form.interval_minutes}
              onChange={handleChange}
              fullWidth
              style={{ marginBottom: 16 }}
              disabled={loading}
            >
              {intervalOptions.map((option) => (
                <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>
              ))}
            </Select>
            <FormControlLabel
              control={
                <Switch
                  checked={form.is_active}
                  onChange={handleChange}
                  name="is_active"
                  color="primary"
                  disabled={loading}
                />
              }
              label="Active"
            />
            <FormControlLabel
              control={
                <Switch
                  checked={form.alert_on_failure}
                  onChange={handleChange}
                  name="alert_on_failure"
                  color="secondary"
                  disabled={loading}
                />
              }
              label="Alert on Failure"
            />
            <DialogActions>
              <Button onClick={handleCloseDialog} disabled={loading}>Cancel</Button>
              <Button type="submit" variant="contained" disabled={loading}>{editId ? "Update" : "Create"}</Button>
            </DialogActions>
          </form>
        </DialogContent>
      </Dialog>
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert
          severity={snackbar.severity}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Card>
  );
}
