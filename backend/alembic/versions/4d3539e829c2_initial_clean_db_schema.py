"""initial clean db schema

Revision ID: 4d3539e829c2
Revises: 
Create Date: 2025-05-20 06:34:06.549189

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4d3539e829c2'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('probe_nodes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('node_uuid', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('hostname', sa.String(), nullable=True),
    sa.Column('internal_ip', sa.String(), nullable=True),
    sa.Column('external_ip', sa.String(), nullable=True),
    sa.Column('region', sa.String(), nullable=True),
    sa.Column('zone', sa.String(), nullable=True),
    sa.Column('api_key', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('last_heartbeat', sa.DateTime(), nullable=True),
    sa.Column('version', sa.String(), nullable=True),
    sa.Column('connection_type', sa.String(), nullable=True),
    sa.Column('last_connected', sa.DateTime(), nullable=True),
    sa.Column('connection_id', sa.String(), nullable=True),
    sa.Column('reconnect_count', sa.Integer(), nullable=True),
    sa.Column('max_concurrent_probes', sa.Integer(), nullable=True),
    sa.Column('supported_tools', sa.JSON(), nullable=True),
    sa.Column('hardware_info', sa.JSON(), nullable=True),
    sa.Column('network_info', sa.JSON(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('admin_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('current_load', sa.Float(), nullable=True),
    sa.Column('avg_response_time', sa.Float(), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=True),
    sa.Column('total_probes_executed', sa.Integer(), nullable=True),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('api_key')
    )
    op.create_index(op.f('ix_probe_nodes_id'), 'probe_nodes', ['id'], unique=False)
    op.create_index(op.f('ix_probe_nodes_node_uuid'), 'probe_nodes', ['node_uuid'], unique=True)
    op.create_table('subscription_tiers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('price_monthly', sa.Integer(), nullable=True),
    sa.Column('price_yearly', sa.Integer(), nullable=True),
    sa.Column('features', sa.JSON(), nullable=True),
    sa.Column('rate_limit_minute', sa.Integer(), nullable=True),
    sa.Column('rate_limit_hour', sa.Integer(), nullable=True),
    sa.Column('rate_limit_day', sa.Integer(), nullable=True),
    sa.Column('rate_limit_month', sa.Integer(), nullable=True),
    sa.Column('max_scheduled_probes', sa.Integer(), nullable=True),
    sa.Column('max_api_keys', sa.Integer(), nullable=True),
    sa.Column('max_history_days', sa.Integer(), nullable=True),
    sa.Column('allowed_probe_intervals', sa.String(), nullable=True),
    sa.Column('max_concurrent_requests', sa.Integer(), nullable=True),
    sa.Column('request_priority', sa.Integer(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('allow_scheduled_probes', sa.Boolean(), nullable=True),
    sa.Column('allow_api_access', sa.Boolean(), nullable=True),
    sa.Column('allow_export', sa.Boolean(), nullable=True),
    sa.Column('allow_alerts', sa.Boolean(), nullable=True),
    sa.Column('allow_custom_intervals', sa.Boolean(), nullable=True),
    sa.Column('priority_support', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subscription_tiers_id'), 'subscription_tiers', ['id'], unique=False)
    op.create_index(op.f('ix_subscription_tiers_name'), 'subscription_tiers', ['name'], unique=True)
    op.create_table('system_metrics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('metric_name', sa.String(), nullable=True),
    sa.Column('metric_value', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_system_metrics_id'), 'system_metrics', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('role', sa.String(), nullable=True),
    sa.Column('email_verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('api_keys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_api_keys_id'), 'api_keys', ['id'], unique=False)
    op.create_index(op.f('ix_api_keys_key'), 'api_keys', ['key'], unique=True)
    op.create_table('api_usage_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('endpoint', sa.String(), nullable=True),
    sa.Column('method', sa.String(), nullable=True),
    sa.Column('status_code', sa.Integer(), nullable=True),
    sa.Column('response_time', sa.Integer(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_api_usage_logs_id'), 'api_usage_logs', ['id'], unique=False)
    op.create_table('diagnostics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tool', sa.String(), nullable=True),
    sa.Column('target', sa.String(), nullable=True),
    sa.Column('result', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('execution_time', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_diagnostics_id'), 'diagnostics', ['id'], unique=False)
    op.create_table('node_registration_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('is_used', sa.Boolean(), nullable=True),
    sa.Column('used_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_user_id', sa.Integer(), nullable=True),
    sa.Column('node_id', sa.Integer(), nullable=True),
    sa.Column('intended_region', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['node_id'], ['probe_nodes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_node_registration_tokens_id'), 'node_registration_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_node_registration_tokens_token'), 'node_registration_tokens', ['token'], unique=True)
    op.create_table('scheduled_probes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('tool', sa.String(), nullable=True),
    sa.Column('target', sa.String(), nullable=True),
    sa.Column('interval_minutes', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('alert_on_failure', sa.Boolean(), nullable=True),
    sa.Column('alert_on_threshold', sa.Boolean(), nullable=True),
    sa.Column('threshold_value', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scheduled_probes_id'), 'scheduled_probes', ['id'], unique=False)
    op.create_table('user_subscriptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('tier_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('starts_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('payment_id', sa.String(), nullable=True),
    sa.Column('payment_method', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tier_id'], ['subscription_tiers.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_user_subscriptions_id'), 'user_subscriptions', ['id'], unique=False)
    op.create_table('node_diagnostics',
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('diagnostic_id', sa.Integer(), nullable=False),
    sa.Column('executed_at', sa.DateTime(), nullable=True),
    sa.Column('execution_time', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['diagnostic_id'], ['diagnostics.id'], ),
    sa.ForeignKeyConstraint(['node_id'], ['probe_nodes.id'], ),
    sa.PrimaryKeyConstraint('node_id', 'diagnostic_id')
    )
    op.create_table('probe_results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scheduled_probe_id', sa.Integer(), nullable=True),
    sa.Column('result', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('execution_time', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['scheduled_probe_id'], ['scheduled_probes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_probe_results_id'), 'probe_results', ['id'], unique=False)
    op.create_table('usage_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('endpoint', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('response_time', sa.Float(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('tier_id', sa.Integer(), nullable=True),
    sa.Column('api_key_id', sa.Integer(), nullable=True),
    sa.Column('was_queued', sa.Boolean(), nullable=True),
    sa.Column('queue_time', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], ),
    sa.ForeignKeyConstraint(['tier_id'], ['subscription_tiers.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usage_logs_id'), 'usage_logs', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_usage_logs_id'), table_name='usage_logs')
    op.drop_table('usage_logs')
    op.drop_index(op.f('ix_probe_results_id'), table_name='probe_results')
    op.drop_table('probe_results')
    op.drop_table('node_diagnostics')
    op.drop_index(op.f('ix_user_subscriptions_id'), table_name='user_subscriptions')
    op.drop_table('user_subscriptions')
    op.drop_index(op.f('ix_scheduled_probes_id'), table_name='scheduled_probes')
    op.drop_table('scheduled_probes')
    op.drop_index(op.f('ix_node_registration_tokens_token'), table_name='node_registration_tokens')
    op.drop_index(op.f('ix_node_registration_tokens_id'), table_name='node_registration_tokens')
    op.drop_table('node_registration_tokens')
    op.drop_index(op.f('ix_diagnostics_id'), table_name='diagnostics')
    op.drop_table('diagnostics')
    op.drop_index(op.f('ix_api_usage_logs_id'), table_name='api_usage_logs')
    op.drop_table('api_usage_logs')
    op.drop_index(op.f('ix_api_keys_key'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_id'), table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_system_metrics_id'), table_name='system_metrics')
    op.drop_table('system_metrics')
    op.drop_index(op.f('ix_subscription_tiers_name'), table_name='subscription_tiers')
    op.drop_index(op.f('ix_subscription_tiers_id'), table_name='subscription_tiers')
    op.drop_table('subscription_tiers')
    op.drop_index(op.f('ix_probe_nodes_node_uuid'), table_name='probe_nodes')
    op.drop_index(op.f('ix_probe_nodes_id'), table_name='probe_nodes')
    op.drop_table('probe_nodes')
    # ### end Alembic commands ###
